<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>coli-conc - Subjects and Occurrences API</title>
    <style>
      /* nunito-italic - latin */
      @font-face {
        font-family: 'Nunito';
        font-style: italic;
        font-weight: 400;
        src: url('./fonts/nunito-v16-latin-italic.eot'); /* IE9 Compat Modes */
        src: local(''),
            url('./fonts/nunito-v16-latin-italic.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */
            url('./fonts/nunito-v16-latin-italic.woff2') format('woff2'), /* Super Modern Browsers */
            url('./fonts/nunito-v16-latin-italic.woff') format('woff'), /* Modern Browsers */
            url('./fonts/nunito-v16-latin-italic.ttf') format('truetype'), /* Safari, Android, iOS */
            url('./fonts/nunito-v16-latin-italic.svg#Nunito') format('svg'); /* Legacy iOS */
      }
      /* nunito-regular - latin */
      @font-face {
        font-family: 'Nunito';
        font-style: normal;
        font-weight: 400;
        src: url('./fonts/nunito-v16-latin-regular.eot'); /* IE9 Compat Modes */
        src: local(''),
            url('./fonts/nunito-v16-latin-regular.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */
            url('./fonts/nunito-v16-latin-regular.woff2') format('woff2'), /* Super Modern Browsers */
            url('./fonts/nunito-v16-latin-regular.woff') format('woff'), /* Modern Browsers */
            url('./fonts/nunito-v16-latin-regular.ttf') format('truetype'), /* Safari, Android, iOS */
            url('./fonts/nunito-v16-latin-regular.svg#Nunito') format('svg'); /* Legacy iOS */
      }
      /* nunito-600 - latin */
      @font-face {
        font-family: 'Nunito';
        font-style: normal;
        font-weight: 600;
        src: url('./fonts/nunito-v16-latin-600.eot'); /* IE9 Compat Modes */
        src: local(''),
            url('./fonts/nunito-v16-latin-600.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */
            url('./fonts/nunito-v16-latin-600.woff2') format('woff2'), /* Super Modern Browsers */
            url('./fonts/nunito-v16-latin-600.woff') format('woff'), /* Modern Browsers */
            url('./fonts/nunito-v16-latin-600.ttf') format('truetype'), /* Safari, Android, iOS */
            url('./fonts/nunito-v16-latin-600.svg#Nunito') format('svg'); /* Legacy iOS */
      }
      /* nunito-600italic - latin */
      @font-face {
        font-family: 'Nunito';
        font-style: italic;
        font-weight: 600;
        src: url('./fonts/nunito-v16-latin-600italic.eot'); /* IE9 Compat Modes */
        src: local(''),
            url('./fonts/nunito-v16-latin-600italic.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */
            url('./fonts/nunito-v16-latin-600italic.woff2') format('woff2'), /* Super Modern Browsers */
            url('./fonts/nunito-v16-latin-600italic.woff') format('woff'), /* Modern Browsers */
            url('./fonts/nunito-v16-latin-600italic.ttf') format('truetype'), /* Safari, Android, iOS */
            url('./fonts/nunito-v16-latin-600italic.svg#Nunito') format('svg'); /* Legacy iOS */
      }
      /* nunito-700 - latin */
      @font-face {
        font-family: 'Nunito';
        font-style: normal;
        font-weight: 700;
        src: url('./fonts/nunito-v16-latin-700.eot'); /* IE9 Compat Modes */
        src: local(''),
            url('./fonts/nunito-v16-latin-700.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */
            url('./fonts/nunito-v16-latin-700.woff2') format('woff2'), /* Super Modern Browsers */
            url('./fonts/nunito-v16-latin-700.woff') format('woff'), /* Modern Browsers */
            url('./fonts/nunito-v16-latin-700.ttf') format('truetype'), /* Safari, Android, iOS */
            url('./fonts/nunito-v16-latin-700.svg#Nunito') format('svg'); /* Legacy iOS */
      }
      /* nunito-700italic - latin */
      @font-face {
        font-family: 'Nunito';
        font-style: italic;
        font-weight: 700;
        src: url('./fonts/nunito-v16-latin-700italic.eot'); /* IE9 Compat Modes */
        src: local(''),
            url('./fonts/nunito-v16-latin-700italic.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */
            url('./fonts/nunito-v16-latin-700italic.woff2') format('woff2'), /* Super Modern Browsers */
            url('./fonts/nunito-v16-latin-700italic.woff') format('woff'), /* Modern Browsers */
            url('./fonts/nunito-v16-latin-700italic.ttf') format('truetype'), /* Safari, Android, iOS */
            url('./fonts/nunito-v16-latin-700italic.svg#Nunito') format('svg'); /* Legacy iOS */
      }
      /* TODO: This should probably be part of the base coli-conc.gbv.de style */
      .button:disabled {
        background-color: grey;
      }
      .button:disabled:hover {
        cursor: default;
      }
    </style>
    <link rel="stylesheet" href="https://coli-conc.gbv.de/css/base.css">
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="manifest" href="/site.webmanifest">
    <!--preload-links-->
  </head>
  <body>
    <header class="header">
      <a
        href="https://coli-conc.gbv.de/"
        class="coli-conc-logo-small">
        <img
          src="https://coli-conc.gbv.de/images/coli-conc.svg"
          alt="coli-conc Logo">
      </a>
      <ul class="menu">
        <li>
          <a
            href="https://coli-conc.gbv.de"
            title="Go to coli-conc website">
            â¬… back to coli-conc website
          </a>
        </li>
      </ul>
      <div style="clear:both" />
    </header>
    <main id="main">
      <div class="text-center">
        <h1>Subjects and Occurrences</h1>
      </div>
      <div class="section">
        <p>
        This API can be used to query <b>subjects and occurrences</b> from controlled vocabularies used to describe records in K10plus catalogue.
        An <b>occurrence</b> gives the number of times a selected concept is used for subject indexing in K10plus database records. Co-occurrences give the number for combination of concepts so they can be used as mapping recommendations. This service allows to query (co-)occurrences of selected vocabularies (RVK, BK, DDC...) from K10plus database. The results are partly based on <a href="https://doi.org/10.5281/zenodo.7016625">a database snapshot</a>.
        </p>
      </div>
      <div class="section">
        <h2>Query Subjects</h2>
        <p>
          <input
            id="ppn-input"
            type="text"
            placeholder="PPN">
          <button 
            id="ppn-submit"
            class="button"
            disabled>
            Load
          </button>
        </p>
        <p id="title"></p>
        <ul id="subjects"></ul>
      </div>
      <div class="section">
        <h2>API</h2>
        <p><b>Endpoints</b></p>
        <ul>
          <li><a href="./subjects" target="_blank">/subjects</a> (<a href="https://github.com/gbv/subjects-api#get-subjects" target="_blank">documentation</a>) to get subjects of a given record (query parameters <code>record</code> and optional <code>scheme</code>)</li>
          <li><a href="./records" target="_blank">/records</a> (<a href="https://github.com/gbv/subjects-api#get-records" target="_blank">documentation</a>) to get records with a given subject (query parameter <code>subjects</code>)</li>
          <li><a href="./occurrences" target="_blank">/occurrences</a> (<a href="https://github.com/gbv/subjects-api#get-occurrences" target="_blank">documentation</a>) to get occurrences for given concept (query parameter <code>member</code>), co-occurrences for given concept and vocabularies (parameters <code>member</code> and <code>scheme</code>), or  of given document (query parameter <code>record</code>).</li>
          <li><a href="./voc" target="_blank">/voc</a> (<a href="https://github.com/gbv/subjects-api#get-voc" target="_blank">documentation</a>) lists supported vocabularies</li>
          <li><a href="./databases" target="_blank">/databases</a> (<a href="https://github.com/gbv/subjects-api#get-databases" target="_blank">documentation</a>) lists supported databases</li>
          <li><a href="./status" target="_blank">/status</a> (<a href="https://github.com/gbv/subjects-api#get-status" target="_blank">documentation</a>) returns information about the service</li>
        </ul>
        <p><b>Sample Queryies</b></p>
        <ul>
          <li>
            <a href="./occurrences?member=http:%2F%2Frvk.uni-regensburg.de%2Fnt%2FDG%25209000" target="_blank">
              occurrences of RVK DG 9000
            </a>
          </li>
          <li>
            <a href="./occurrences?member=http:%2F%2Frvk.uni-regensburg.de%2Fnt%2FDG%25209000&scheme=http://bartoc.org/en/node/241" target="_blank">
              co-occurrences of RVK DG 9000 in DDC
            </a>
          </li>
          <li>
            <a href="./occurrences?member=http:%2F%2Frvk.uni-regensburg.de%2Fnt%2FDG%25209000&scheme=*" target="_blank">
              co-occurrences of RVK DG 9000 in all vocabularies
            </a>
          </li>
          <li>
            <a href="./subjects?record=http://uri.gbv.de/document/opac-de-627:ppn:012401471" target="_blank">
              subjects of a record (all vocabularies)
            </a>
          </li>
          <li>
            <a href="./subjects?record=http://uri.gbv.de/document/opac-de-627:ppn:012401471&scheme=http://bartoc.org/en/node/533" target="_blank">
              subjects of a record (selected vocabulary)
            </a>
          </li>
          <li>
            <a href="./records?subject=http://uri.gbv.de/terminology/bk/20.04" target="_blank">
              records of a subject
            </a>
          </li>
        </ul>
        <p>
          See also the <a href="https://github.com/gbv/subjects-api" target="_blank">full documentation</a> and implementation for details. Extension and a web interface to use the API are planned (see <a href="https://github.com/gbv/subjects-api/issues/54" target="_blank">#54</a>).
        </p>
      </div>
    </main>
    <footer class="footer">
      <a href="<%= homepage %>"><%= name %></a> version <%= version %>
    </footer>
  </body>
  <script src="https://cdn.jsdelivr.net/npm/jskos-tools@1/dist/jskos-tools.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/cocoda-sdk@2/dist/cocoda-sdk.js"></script>
  <script>
    const ppnInputEl = document.getElementById("ppn-input")
    const ppnSubmitEl = document.getElementById("ppn-submit")
    const titleEl = document.getElementById("title")
    const resultsEl = document.getElementById("subjects")

    // Click and type events
    ppnSubmitEl.addEventListener("click", loadResults)
    ppnInputEl.addEventListener("keyup", e => {
      e.preventDefault()
      if (e.keyCode === 13) {
        loadResults()
      } else {
        ppnSubmitEl.disabled = ppnInputEl.value.length === 0
      }
    })

    let schemes = []
    const schemesPromise = (async () => {
      try {
        const registry = CDK.cdk.initializeRegistry({
          provider: "ConceptApi",
          schemes: "./voc",
        })
        schemes = (await registry.getSchemes()).map(scheme => {
          scheme = new jskos.ConceptScheme(scheme)
          scheme.notation = [scheme.VOC.toUpperCase()]
          return scheme
        })
      } catch (error) {
        console.error(error)
      }
    })()

    // Set PPN in URL params
    function setPPN(ppn) {
      const urlParams = new URLSearchParams(window.location.search)
      if (ppn) {
        urlParams.set("ppn", ppn)
      } else {
        urlParams.delete("ppn")
      }
      // Build new URL
      let url = `${window.location.href.replace(window.location.search, "")}`
      if (urlParams.toString()) {
        url += `?${urlParams.toString()}`
      }
      window.history.replaceState({}, "", url)
    }

    // Get PPN from URL params at first load
    const urlParams = new URLSearchParams(window.location.search)
    const ppn = urlParams.get("ppn")
    if (ppn) {
      ppnInputEl.value = ppn
      loadResults()
    }

    async function getTitleName(ppn) {
      return (await (await fetch(`https://ws.gbv.de/suggest/csl2/?citationstyle=ieee&query=pica.ppn=${ppn}&database=opac-de-627&language=de`)).json())[1][0]
    }

    async function loadResults() {
      const ppn = ppnInputEl.value
      if (ppn.length === 0) {
        return
      }
      ppnSubmitEl.disabled = true
      resultsEl.innerHTML = ""
      titleEl.innerText = "Loading..."
      setPPN(ppn)
      await schemesPromise
      try {
        const res = await fetch(`./subjects?record=http://uri.gbv.de/document/opac-de-627:ppn:${ppn}`)
        const subjects = (await res.json()).map(subject => {
          subject.inScheme[0] = schemes.find(scheme => jskos.compare(scheme, subject.inScheme[0])) || subject.inScheme[0]
          return subject
        })
        displayResults(subjects)
        const titleName = (await getTitleName(ppn)) || "Unknown title"
        titleEl.innerText = ppn + ": " + titleName
        // Add concept data to all subjects
        await loadConceptData(subjects)
        displayResults(subjects)
      } catch (error) {
        console.error(error)
        titleEl.innerText = `Error: ${error.message}`
      }
      ppnSubmitEl.disabled = false
    }

    async function loadConceptData(subjects) {
      const subjectsByScheme = {}
      for (const scheme of schemes) {
        if (scheme.uri && scheme._registry) {
          subjectsByScheme[scheme.uri] = {
            scheme,
            concepts: [],
          }
        }
      }
      for (const subject of subjects) {
        const entry = subjectsByScheme[subject.inScheme[0]?.uri]
        if (!entry) {
          console.warn(`No registry to load concept data for ${subject.uri}.`)
          continue
        }
        entry.concepts.push(subject)
      }
      const results = await Promise.all(Object.values(subjectsByScheme).filter(({ concepts }) => concepts.length).map(({ scheme, concepts }) => {
        return scheme._registry.getConcepts({ concepts }).catch(() => ([]))
      }))
      results.reduce((all, cur) => all.concat(cur), []).forEach(concept => {
        const subject = subjects.find(s => jskos.compare(s, concept))
        if (subject) {
          subject.prefLabel = concept.prefLabel
        }
      })
    }

    function displayResults(subjects) {
      resultsEl.innerHTML = ""
      for (const subject of subjects) {
        const voc = jskos.notation(subject.inScheme[0]), notation = jskos.notation(subject), prefLabel = jskos.prefLabel(subject, { fallbackToUri: false })
        const li = document.createElement("li"), notationEl = document.createElement("b")
        notationEl.appendChild(document.createTextNode(notation))
        li.appendChild(document.createTextNode(voc + " "))
        li.appendChild(notationEl)
        if (prefLabel) {
          li.append(document.createTextNode(" " + prefLabel))
        }
        resultsEl.appendChild(li)
      }
      if (subjects.length === 0) {
        const li = document.createElement("li")
        li.appendChild(document.createTextNode("No results."))
        resultsEl.appendChild(li)
      }
    }
  </script>
</html>
